<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Methodology order</title>
  <link rel="stylesheet" href="../style.css" />


<SCRIPT LANGUAGE="JavaScript">
<!--

let order = [], colour = [];

function nextPage()
{
// window.open("../methodol/over/servcon.htm",TARGET="output","toolbar=no,directories=no,status=yes,menubar=no,scrollbars=yes,resizable=yes")
}

function backPage()
{
// window.open("blank.htm",TARGET="output","toolbar=no,directories=no,status=yes,menubar=no,scrollbars=yes,resizable=yes")
}


feed=""

feedServCon="step 1 :The first consideration in this instance would be the service conditions as the primary factor in the selection process."

feedServReq="step 2:Often this would be the first item, as the component must fulfil its function. In this case the service conditions partly define the requirements so this is second in the list."

feedCandMat="step 3:After service conditions a list of candidate material groups can be drawn up, eg metals, polymers, ceramics."

feedInitSuit="step 4:Initial suitability should be evaluated after a list of candidate material groups is known. Some of these groups may eliminated at an early stage"
 
feedMaterialsResponse="step 5:Once the material groups have been narrowed, more detailed investigation can take place.  This would involve considering how materials respond to the environment"

feedSelectSuit="step 6:Knowing how your candidate materials respond to the environment, the next step would be to select technically suitable materials"
 
feedCost="step 7:Cost is of primary importance but chronologically, cost estimates may come at a later stage in the process.  Here, cost estimates can be made after suitable materials have been selected."

feedFinalSelect="step 8:Final material selection can be made once all other stages have been executed."




candTitle="candidate material groups"
respTitle="response of materials to environment"
servconTitle="service conditions"
servreqTitle="service requirements"
costTitle="cost estimates"
initTitle="initial suitability"
suitTitle="select suitable materials for parts"
finalTitle="final materials selection"

function candLight()
{
colourWhite()
colour[candPlace]="aqua"
showList()
doc.document.close()
}

function respLight()
{
colourWhite()
colour[respPlace]="aqua"
showList()
doc.document.close()
}

function servconLight()
{
colourWhite()
colour[servconPlace]="aqua"
showList()
doc.document.close()
}

function servreqLight()
{
colourWhite()
colour[servreqPlace]="aqua"
showList()
doc.document.close()
}

function costLight()
{
colourWhite()
colour[costPlace]="aqua"
showList()
doc.document.close()
}

function initLight()
{
colourWhite()
colour[initPlace]="aqua"
showList()
doc.document.close()
}

function suitLight()
{
colourWhite()
colour[suitPlace]="aqua"
showList()
doc.document.close()
}

function finalLight()
{
colourWhite()
colour[finalPlace]="aqua"
showList()
doc.document.close()
}


order=new Array(7)
order[7]=candTitle
order[6]=respTitle
order[5]=servconTitle
order[4]=servreqTitle
order[3]=costTitle
order[2]=initTitle
order[1]=suitTitle
order[0]=finalTitle


candPlace=7
respPlace=6
servconPlace=5
servreqPlace=4
costPlace=3
initPlace=2
suitPlace=1
finalPlace=0



colour=new Array(7)					
								
function colourWhite()
{								
	for (i=0; i<=7; i++)
								
	{
	colour[i]="white"					
	}
								
}


colourWhite()	


showList()
doc.document.close();


function showList() {
      const outputDiv = document.getElementById("output");
      if (!outputDiv) return;

      let html = '<table border="1" style="border-collapse: collapse;">';
      for (let i = 7; i >= 0; i--) {
        html += `<tr>
          <td style="background-color:${colour[i]}; font-size: 1.2em; text-align:center; width:3ch;">${8-i}</td>
          <td style="background-color:${colour[i]}; font-size: 1.2em; padding-left:8px;">${order[i]}</td>
        </tr>`;
      }
      html += "</table>";

      outputDiv.innerHTML = html;
    }



window.onload = function() {
    showList();
}




function moveFactor(factorName,direct)

{

colourWhite()
	
if (factorName=="cand")
	
	{
	if ((candPlace!=7 && direct=="up") || (candPlace!=0 && direct=="down"))
		{
		if (direct=="up")
			{
			findAdj(candPlace,"up")
			candPlace=candPlace+1
				
			}		
		else
			{
			findAdj(candPlace,"down")
			candPlace=candPlace-1
			}
		colour[candPlace]="aqua"
		order[candPlace]=candTitle
		}
	}



if (factorName=="resp")
	
	{
	if ((respPlace!=7 && direct=="up") || (respPlace!=0 && direct=="down"))
		{
		if (direct=="up")
			{
			findAdj(respPlace,"up")
			respPlace=respPlace+1
			}		
		else
			{
			findAdj(respPlace,"down")
			respPlace=respPlace-1
			}
		colour[respPlace]="aqua"
		order[respPlace]=respTitle
		}
	}


if (factorName=="servreq")
	
	{
	if ((servreqPlace!=7 && direct=="up") || (servreqPlace!=0 && direct=="down"))
		{
		if (direct=="up")
			{
			findAdj(servreqPlace,"up")
			servreqPlace=servreqPlace+1
			}		
		else
			{
			findAdj(servreqPlace,"down")
			servreqPlace=servreqPlace-1
			}
		colour[servreqPlace]="aqua"
		order[servreqPlace]=servreqTitle
		}
	}

if (factorName=="servcon")
	
	{
	if ((servconPlace!=7 && direct=="up") || (servconPlace!=0 && direct=="down"))
		{
		if (direct=="up")
			{
			findAdj(servconPlace,"up")
			servconPlace=servconPlace+1
			}		
		else
			{
			findAdj(servconPlace,"down")
			servconPlace=servconPlace-1
			}
		colour[servconPlace]="aqua"
		order[servconPlace]=servconTitle
		}
	}


if (factorName=="cost")
	
	{
	if ((costPlace!=7 && direct=="up") || (costPlace!=0 && direct=="down"))
		{
		if (direct=="up")
			{
			findAdj(costPlace,"up")
			costPlace=costPlace+1
			}		
		else
			{
			findAdj(costPlace,"down")
			costPlace=costPlace-1
			}
		colour[costPlace]="aqua"
		order[costPlace]=costTitle
		}
	}


if (factorName=="init")
	
	{
	if ((initPlace!=7 && direct=="up") || (initPlace!=0 && direct=="down"))
		{
		if (direct=="up")
			{
			findAdj(initPlace,"up")
			initPlace=initPlace+1
			}		
		else
			{
			findAdj(initPlace,"down")
			initPlace=initPlace-1
			}
		colour[initPlace]="aqua"
		order[initPlace]=initTitle
		}
	}


if (factorName=="suit")
	
	{
	if ((suitPlace!=7 && direct=="up") || (suitPlace!=0 && direct=="down"))
		{
		if (direct=="up")
			{
			findAdj(suitPlace,"up")
			suitPlace=suitPlace+1
			}		
		else
			{
			findAdj(suitPlace,"down")
			suitPlace=suitPlace-1
			}
		colour[suitPlace]="aqua"
		order[suitPlace]=suitTitle
		}
	}


if (factorName=="final")
	
	{
	if ((finalPlace!=7 && direct=="up") || (finalPlace!=0 && direct=="down"))
		{
		if (direct=="up")
			{
			findAdj(finalPlace,"up")
			finalPlace=finalPlace+1
			}		
		else
			{
			findAdj(finalPlace,"down")
			finalPlace=finalPlace-1
			}
	colour[finalPlace]="aqua"
	order[finalPlace]=finalTitle
		}
	}

showList()

}


function findAdj(factorPlace,direc)

{

		if ((factorPlace+1==candPlace) && (direc=="up"))
			{
			candPlace=candPlace-1
			order[candPlace]=candTitle
			}
		else
			if ((factorPlace-1==candPlace) && (direc=="down")) 
				{
				candPlace=candPlace+1
				order[candPlace]=candTitle
				}

		else		
			if ((factorPlace+1==respPlace) && (direc=="up"))
				{
				respPlace=respPlace-1
				order[respPlace]=respTitle
				}
		else
			if ((factorPlace-1==respPlace) && (direc=="down")) 
				{
				respPlace=respPlace+1
				order[respPlace]=respTitle
				}

		else
			if ((factorPlace+1==servconPlace) && (direc=="up"))
				{
				servconPlace=servconPlace-1
				order[servconPlace]=servconTitle
				}
		else
			if ((factorPlace-1==servconPlace) && (direc=="down")) 
				{
				servconPlace=servconPlace+1
				order[servconPlace]=servconTitle
				}

		else
			if ((factorPlace+1==servreqPlace) && (direc=="up"))
				{
				servreqPlace=servreqPlace-1
				order[servreqPlace]=servreqTitle
				}
		else
			if ((factorPlace-1==servreqPlace) && (direc=="down")) 
				{
				servreqPlace=servreqPlace+1
				order[servreqPlace]=servreqTitle
				}

		else
			if ((factorPlace+1==costPlace) && (direc=="up"))
				{
				costPlace=costPlace-1
				order[costPlace]=costTitle
				}
		else
			if ((factorPlace-1==costPlace) && (direc=="down")) 
				{
				costPlace=costPlace+1
				order[costPlace]=costTitle
				}

		else
			if ((factorPlace+1==initPlace) && (direc=="up"))
				{
				initPlace=initPlace-1
				order[initPlace]=initTitle
				}
		else
			if ((factorPlace-1==initPlace) && (direc=="down")) 
				{
				initPlace=initPlace+1
				order[initPlace]=initTitle
				}

		else
			if ((factorPlace+1==suitPlace) && (direc=="up"))
				{
				suitPlace=suitPlace-1
				order[suitPlace]=suitTitle
				}
		else
			if ((factorPlace-1==suitPlace) && (direc=="down")) 
				{
				suitPlace=suitPlace+1
				order[suitPlace]=suitTitle
				}

		else
			if ((factorPlace+1==finalPlace) && (direc=="up"))
				{
				finalPlace=finalPlace-1
				order[finalPlace]=finalTitle
				}
		else
			if ((factorPlace-1==finalPlace) && (direc=="down")) 
				{
				finalPlace=finalPlace+1
				order[finalPlace]=finalTitle
				}


}



	/*-----------------------------------------------
		Respond(theForm)()
		
		Description: response on incorrect anser
		
	----------------------------------------------- */

function Respond() {
      colourWhite();
      let feedTitle = "";
      let wrongAns = false;
      let feed = "correct";

      if (servconPlace != 7) {
        wrongAns = true;
        feed = feedServCon;
        feedTitle = servconTitle;
        colour[servconPlace] = "aqua";
      } else if (servreqPlace != 6) {
        wrongAns = true;
        feed = feedServReq;
        feedTitle = servreqTitle;
        colour[servreqPlace] = "aqua";
      } else if (candPlace != 5) {
        wrongAns = true;
        feed = feedCandMat;
        feedTitle = candTitle;
        colour[candPlace] = "aqua";
      } else if (initPlace != 4) {
        wrongAns = true;
        feed = feedInitSuit;
        feedTitle = initTitle;
        colour[initPlace] = "aqua";
      } else if (respPlace != 3) {
        wrongAns = true;
        feed = feedMaterialsResponse;
        feedTitle = respTitle;
        colour[respPlace] = "aqua";
      } else if (suitPlace != 2) {
        wrongAns = true;
        feed = feedSelectSuit;
        feedTitle = suitTitle;
        colour[suitPlace] = "aqua";
      } else if (costPlace != 1) {
        wrongAns = true;
        feed = feedCost;
        feedTitle = costTitle;
        colour[costPlace] = "aqua";
      } else if (finalPlace != 0) {
        wrongAns = true;
        feed = feedFinalSelect;
        feedTitle = finalTitle;
        colour[finalPlace] = "aqua";
      }

      showList();

      const outputDiv = document.getElementById("output");
      if (!outputDiv) return;

      let feedbackHtml = '<section style="margin-top:1em;"><p style="font-weight:bold;">';
      feedbackHtml += wrongAns ? feedTitle : "Correct! Well done.";
      feedbackHtml += "</p><p>";
      feedbackHtml += wrongAns ? feed : "";
      feedbackHtml += "</p></section>";

      outputDiv.innerHTML += feedbackHtml;
    }

	window.onload = () => {
      colourWhite();
      initializeOrderPositions(); // This is the part of your JS that instantiates variables like candPlace=7 etc (copy from your original)
      showList();
    };



//-->
</SCRIPT>


</HEAD>



<body>
	<header>
	  <h1>Selection Methodology - Part 2</h1>
	  <p>
		Now, try and place the following factors in chronological order using the promote (P) and demote (D) buttons:
	  </p>
	</header>
  
	<main>
	  <form name="order" onsubmit="event.preventDefault(); Respond(this);">
		<table>
		  <tbody>
			<tr>
			  <td><a href="#" onmouseenter="candLight()">candidate material groups</a></td>
			  <td><button type="button" onclick='moveFactor("cand","up")'>P</button></td>
			  <td><button type="button" onclick='moveFactor("cand","down")'>D</button></td>
			</tr>
  
			<tr>
			  <td><a href="#" onmouseenter="respLight()">response of materials to environment</a></td>
			  <td><button type="button" onclick='moveFactor("resp","up")'>P</button></td>
			  <td><button type="button" onclick='moveFactor("resp","down")'>D</button></td>
			</tr>
  
			<tr>
			  <td><a href="#" onmouseenter="servreqLight()">service requirements</a></td>
			  <td><button type="button" onclick='moveFactor("servreq","up")'>P</button></td>
			  <td><button type="button" onclick='moveFactor("servreq","down")'>D</button></td>
			</tr>
  
			<tr>
			  <td><a href="#" onmouseenter="servconLight()">service conditions</a></td>
			  <td><button type="button" onclick='moveFactor("servcon","up")'>P</button></td>
			  <td><button type="button" onclick='moveFactor("servcon","down")'>D</button></td>
			</tr>
  
			<tr>
			  <td><a href="#" onmouseenter="costLight()">cost estimates</a></td>
			  <td><button type="button" onclick='moveFactor("cost","up")'>P</button></td>
			  <td><button type="button" onclick='moveFactor("cost","down")'>D</button></td>
			</tr>
  
			<tr>
			  <td><a href="#" onmouseenter="initLight()">initial suitability</a></td>
			  <td><button type="button" onclick='moveFactor("init","up")'>P</button></td>
			  <td><button type="button" onclick='moveFactor("init","down")'>D</button></td>
			</tr>
  
			<tr>
			  <td><a href="#" onmouseenter="suitLight()">select suitable materials for parts</a></td>
			  <td><button type="button" onclick='moveFactor("suit","up")'>P</button></td>
			  <td><button type="button" onclick='moveFactor("suit","down")'>D</button></td>
			</tr>
  
			<tr>
			  <td><a href="#" onmouseenter="finalLight()">final materials selection</a></td>
			  <td><button type="button" onclick='moveFactor("final","up")'>P</button></td>
			  <td><button type="button" onclick='moveFactor("final","down")'>D</button></td>
			</tr>
		  </tbody>
		</table>
  
		<p style="text-align:center; margin-top: 1em;">
		  <button type="submit">Submit</button>
		</p>
	  </form>
  
	  <nav style="margin-top: 2em;">
		<a href="../methodol/methq.htm" onclick="backPage()">
		  <img src="../buttons/back.gif" alt="back" />
		</a>
		<a href="../methodol/methtab.htm" onclick="nextPage()">
		  <img src="../buttons/continue.gif" alt="continue" />
		</a>
	  </nav>
  
	  <!-- Output area where table and feedback appear -->
	  <div id="output" style="margin-top: 2em;"></div>
	</main>
  </body>
  </html>